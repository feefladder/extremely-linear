#!/bin/bash
#
# This script makes sure that all commit hashes have nice and incremental prefixes.
#
# Move this script to somewhere on your path, and run it as "git linearize"
#
# Built with https://github.com/not-an-aardvark/lucky-commit

set -euo pipefail

function echoinfo() {
    LIGHT_GREEN='\033[1;32m'
    NC='\033[0m' # No Color
    printf "${LIGHT_GREEN}$1${NC}\n"
}

function echoerr() {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    printf "${RED}$1${NC}\n" >&2 
}

function git_root() {
  git rev-parse --show-toplevel
}

function install_hook() {
  FILE="$(git_root)/.git/hooks/post-commit"
  if [ -f $FILE ]; then
   echoerr "post-commit hook already exists at $FILE. Aborting!"
   exit 1
  fi

  cat > $FILE <<- EOM
#!/bin/bash
git linearize
EOM
  chmod +x $FILE

  echoinfo "Installed hook to .git/hooks/post-commit!"
}

EL_FORMAT="%07d0"
VERBOSE_LOG=0

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "git linearize - Create an extremely linear git history"
      echo " "
      echo "git linearize [options]"
      echo " "
      echo "options:"
      echo "-h, --help                show brief help"
      echo "-v, --verbose             more verbose logging"
      echo "--short                   use shorter 6 digit prefix (quick mode)"
      echo "--format [format]         specify your own prefix format (pritnf style)"
      echo "--install-hook            install git-linearize as a post-commit hook (current repo only)"
      exit 0
      ;;
    --short)
      EL_FORMAT="%06d"
      shift
      ;;
    --format)
      shift
      if test $# -gt 0; then
        export EL_FORMAT=$1
      else
        echo "no format specified"
        exit 1
      fi
      shift
      ;;
    --install-hook)
      shift
      install_hook
      exit 0
      ;;
    -v|--verbose)
      shift
      VERBOSE_LOG=1
      ;;
    *)
      break
      ;;
  esac
done

if ! command -v lucky_commit &> /dev/null
then
    echoerr "[!] Dependency lucky_commit was not found on your PATH"
    exit 1
fi

# All commits in our repository (on the current branch)
commits=$(git log --format=format:%H --reverse)

# Remember which branch we are on
pre_branch=$(git branch --show-current)

# Create a new temporary branch to use while crunching the numbers
git branch -D extremely-linear || true
git checkout -b extremely-linear

# Find start commit
prev_commit=""
did_reset=0
i=0

for sha1 in $commits; do
    # Desired prefix of commit
    prefix=$(printf "$EL_FORMAT" $i)
    ((i=i+1))

    # Looping through the full history since the root commit
    # Making sure that each commit has the expected prefix
    if [[ "$sha1" == $prefix* ]] && ((!did_reset)); then
        if ((VERBOSE_LOG)); then
          echoinfo "[x] $sha1 starts with $prefix, doing nothing"
        fi

        prev_commit="$sha1"
        continue
    else
        # Found the first commit that does not have the correct prefix
        # Reset to this commits parent (the last commit with a good prefix)
        if ((!did_reset)); then
            if ((VERBOSE_LOG)); then
              echoinfo "[x] Found first misaligned commit=$sha1"
            fi

            git reset --hard "$sha1"
            did_reset=1
        else
            # Cherry pick the next commit
            git cherry-pick --keep-redundant-commits --allow-empty-messages "$sha1"
        fi

        if ((VERBOSE_LOG)); then
          echoinfo "[x] Fixing $sha1 (looking for prefix=$prefix)"
        fi

        # Run lucky_commit
        lucky_commit "$prefix"

        new_sha=$(git rev-parse HEAD)
        echoinfo "[x] $sha1 is now $new_sha"
    fi
done

# Move the branch that we used to be on to our new and __improved__ branch!
git branch -D "$pre_branch"
git checkout -b "$pre_branch"

echoinfo "[x] All done, have a good day"